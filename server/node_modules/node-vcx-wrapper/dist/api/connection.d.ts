/// <reference types="node" />
import { ISerializedData, StateType } from './common';
import { VCXBaseWithState } from './vcx-base-with-state';
/**
 * @description Interface that represents the attributes of a Connection object.
 * This data is expected as the type for deserialize's parameter and serialize's return value
 * @interface
 */
export interface IConnectionData {
    source_id: string;
    invite_detail: string;
    handle: number;
    pw_did: string;
    pw_verkey: string;
    did_endpoint: string;
    endpoint: string;
    uuid: string;
    wallet: string;
    state: StateType;
}
export interface IConnectionCreateData {
    id: string;
}
export declare type IConnectionInvite = string;
export interface IRecipientInviteInfo extends IConnectionCreateData {
    invite: IConnectionInvite;
}
export interface IConnectOptions {
    data: string;
}
export interface IMessageData {
    msg: string;
    type: string;
    title: string;
    refMsgId?: string;
}
export interface ISignatureData {
    data: Buffer;
    signature: Buffer;
}
export declare function voidPtrToUint8Array(origPtr: any, length: number): Buffer;
/**
 * @class Class representing a Connection
 */
export declare class Connection extends VCXBaseWithState<IConnectionData> {
    /**
     * Create a connection object, represents a single endpoint and can be used for sending and receiving
     * credentials and proofs
     *
     * Example:
     * ```
     * source_id = 'foobar123'
     * connection = await Connection.create(source_id)
     * ```
     */
    static create({ id }: IConnectionCreateData): Promise<Connection>;
    /**
     * Create a connection object with a provided invite, represents a single endpoint and can be used for
     * sending and receiving credentials and proofs.
     * Invite details are provided by the entity offering a connection and generally pulled from a provided QRCode.
     *
     * Example:
     * ```
     * sourceId = 'foobar123'
     * connection_handle = await Connection.createWithInvite({sourceId, inviteDetails})
     * ```
     */
    static createWithInvite({ id, invite }: IRecipientInviteInfo): Promise<Connection>;
    /**
     * Create the object from a previously serialized object.
     * Example:
     * data = await connection1.serialize()
     * connection2 = await Connection.deserialize(data)
     */
    static deserialize(connectionData: ISerializedData<IConnectionData>): Promise<Connection>;
    protected _releaseFn: (handle: number) => number;
    protected _updateStFn: (commandId: number, handle: number, cb: any) => number;
    protected _updateStWithMessageFn: (commandId: number, handle: number, message: string, cb: any) => number;
    protected _getStFn: (commandId: number, handle: number, cb: any) => number;
    protected _serializeFn: (commandId: number, handle: number, cb: any) => number;
    protected _deserializeFn: (commandId: number, data: string, cb: any) => number;
    protected _inviteDetailFn: (commandId: number, handle: number, abbreviated: boolean, cb: any) => number;
    /**
     *
     * Updates the state of the connection from the given message.
     *
     * Example:
     * ```
     * await object.updateStateWithMessage(message)
     * ```
     * @returns {Promise<void>}
     */
    updateStateWithMessage(message: string): Promise<void>;
    /**
     * Delete the object from the agency and release any memory associated with it
     *
     * Example:
     * ```
     * def connection = await Connection.create(source_id)
     * await connection.delete()
     * ```
     */
    delete(): Promise<void>;
    /**
     * Creates a connection between enterprise and end user.
     *
     * Example:
     * ```
     * connection = await Connection.create('foobar123')
     * inviteDetails = await connection.connect(
     *     {data: '{"connection_type":"SMS","phone":"5555555555"}',"use_public_did":true})
     * ```
     * @returns {Promise<string}
     */
    connect(connectionData: IConnectOptions): Promise<string>;
    /**
     * Sends a message to the connection.
     *
     * Example:
     * ```
     * msg_id = await connection.send_message(
     *     {msg:"are you there?",type:"question","title":"Sending you a question"})
     * ```
     * @returns {Promise<string}
     */
    sendMessage(msgData: IMessageData): Promise<string>;
    /**
     * Sign data using pairwise key.
     *
     * Example:
     * ```
     * signature = await connection.signData(bufferOfBits)
     * ```
     * @returns {Promise<string}
     */
    signData(data: Buffer): Promise<Buffer>;
    /**
     * Verify the signature of the data using pairwise key.
     *
     * Example:
     * ```
     * valid = await connection.verifySignature({data: bufferOfBits, signature: signatureBits})
     * ```
     * @returns {Promise<string}
     */
    verifySignature(signatureData: ISignatureData): Promise<boolean>;
    /**
     * Gets the details of the invitation that was returned from the Agent Service.
     *
     * Example:
     * ```
     * phoneNumber = '8019119191'
     * connection = await Connection.create('foobar123')
     * inviteDetails = await connection.connect({phone: phoneNumber})
     * inivteDetailsAgain = await connection.inviteDetails()
     * ```
     */
    inviteDetails(abbr?: boolean): Promise<IConnectionInvite>;
    /**
     * Redirects to an existing connection if one already present.
     *
     * Example:
     * ```
     * const oldConnectionToAcme = searchConnectionsByPublicDID({
     *  public_did: inviteDetails.publicDID
     * })
     * const redirectConnectionToAcme = await Connection.createWithInvite({
     *  id: 'faber-redirect',
     *  invite: JSON.stringify(inviteDetails)
     * })
     * await redirectConnectionToAcme.redirect({
     *  redirectToConnection: oldConnectionToAcme
     * })
     * ```
     */
    connectionRedirect(existingConnection: Connection): Promise<void>;
    /**
     * Gets the redirection details if the connection already exists.
     *
     * Example:
     * ```
     * await connectionToAlice.updateState()
     * connectionState = await connectionToAlice.getState()
     *
     * if (connectionState == StateType.Redirected) {
     * redirectDetails = await connectionToAlice.getRedirectDetails()
     * serializedOldConnection = searchConnectionsByTheirDid({
     *   theirDid: redirectDetails.theirDID
     * })
     * oldConnection = await Connection.deserialize({
     *   connectionData: serializedOldConnection
     * })
     *}
     * ```
     */
    getRedirectDetails(): Promise<string>;
}
