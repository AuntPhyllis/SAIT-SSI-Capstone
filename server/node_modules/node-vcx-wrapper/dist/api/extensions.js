"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ffi = require("ffi");
const ref = require("ref");
const errors_1 = require("../errors");
const rustlib_1 = require("../rustlib");
const ffi_helpers_1 = require("../utils/ffi-helpers");
function voidPtrToUint8Array(origPtr, length) {
    /**
     * Read the contents of the pointer and copy it into a new Buffer
     */
    const ptrType = ref.refType('uint8 *');
    const pointerBuf = ref.alloc(ptrType, origPtr);
    const newPtr = ref.readPointer(pointerBuf, 0, length);
    const newBuffer = Buffer.from(newPtr);
    return newBuffer;
}
class Extensions {
    /**
     * Pack message.
     *
     * Example:
     * ```
     * ```
     * @returns {Promise<string}
     */
    packMessage({ data, keys, sender }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield ffi_helpers_1.createFFICallbackPromise((resolve, reject, cb) => {
                    const rc = rustlib_1.rustAPI().vcx_pack_message(0, 0, ref.address(data), data.length, keys, sender, cb);
                    if (rc) {
                        reject(rc);
                    }
                }, (resolve, reject) => ffi.Callback('void', ['uint32', 'uint32', 'pointer', 'uint32'], (xHandle, err, details, length) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    if (!details) {
                        reject(`returned empty buffer`);
                        return;
                    }
                    const newBuffer = voidPtrToUint8Array(details, length);
                    resolve(newBuffer);
                }));
            }
            catch (err) {
                throw new errors_1.VCXInternalError(err);
            }
        });
    }
    /**
     * Unpack message.
     *
     * Example:
     * ```
     * ```
     * @returns {Promise<string}
     */
    unpackMessage(unpackData) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield ffi_helpers_1.createFFICallbackPromise((resolve, reject, cb) => {
                    const rc = rustlib_1.rustAPI().vcx_unpack_message(0, 0, ref.address(unpackData.data), unpackData.data.length, cb);
                    if (rc) {
                        reject(rc);
                    }
                }, (resolve, reject) => ffi.Callback('void', ['uint32', 'uint32', 'pointer', 'uint32'], (xHandle, err, details, length) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    if (!details) {
                        reject(`returned empty buffer`);
                        return;
                    }
                    const newBuffer = voidPtrToUint8Array(details, length);
                    resolve(newBuffer);
                }));
            }
            catch (err) {
                throw new errors_1.VCXInternalError(err);
            }
        });
    }
}
exports.Extensions = Extensions;
//# sourceMappingURL=extensions.js.map