import { ISerializedData, StateType } from './common';
import { Connection } from './connection';
import { VCXBaseWithState } from './vcx-base-with-state';
export interface IProofCreateData {
    sourceId: string;
    attrs: IProofAttr[];
    name: string;
    revocationInterval: IRevocationInterval;
}
export interface IProofConstructorData {
    attrs: IProofAttr[];
    name: string;
}
/**
 * @description Interface that represents the attributes of a Proof object.
 * This interface is expected as the type for deserialize's parameter and serialize's return value
 * @interface
 */
export interface IProofData {
    source_id: string;
    handle: number;
    requested_attrs: string;
    prover_did: string;
    state: StateType;
    name: string;
    proof_state: ProofState;
    proof: any;
}
export interface IProofResponses {
    proof?: string;
    proofState: ProofState;
}
export declare enum ProofFieldType {
    Revealed = "revealed",
    Unrevealed = "unrevealed",
    SelfAttested = "self_attested",
    Predicate = "predicate"
}
export declare enum PredicateTypes {
    GE = "GE",
    LE = "LE",
    EQ = "EQ"
}
/**
 * @description This represents one attribute expected for user to prove.
 * A list of these attributes will be composed of all requirements for user to prove.
 * @interface
 */
export interface IProofAttr {
    restrictions?: IFilter[];
    name: string;
}
export interface IFilter {
    schemaId?: string;
    schemaIssuerDid?: string;
    schemaName: string;
    schemaVersion: string;
    issuerDid?: string;
    credDefId?: string;
}
export declare enum ProofState {
    Undefined = 0,
    Verified = 1,
    Invalid = 2
}
export interface IProofPredicate {
    attr_name: string;
    p_type: string;
    value: number;
    restrictions?: IFilter[];
}
export interface IRevocationInterval {
    from?: number;
    to?: number;
}
/**
 * Class representing a Proof
 */
export declare class Proof extends VCXBaseWithState<IProofData> {
    /**
     * Builds a generic proof object
     *
     * Example:
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId',
     *   revocationInterval: {from: 1, to: 2}
     * }
     * proof1 = await Proof.create(data)
     * ```
     */
    static create({ sourceId, ...createDataRest }: IProofCreateData): Promise<Proof>;
    /**
     * Builds a Proof object with defined attributes.
     *
     * Attributes are provided by a previous call to the serialize function.
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof1 = await Proof.create(data)
     * data1 = await Proof.serialize()
     * await Proof.deserialize(data1)
     * ```
     */
    static deserialize(proofData: ISerializedData<IProofData>): Promise<Proof>;
    protected _releaseFn: (handle: number) => number;
    protected _updateStFn: (commandId: number, handle: number, cb: any) => number;
    protected _updateStWithMessageFn: (commandId: number, handle: number, message: string, cb: any) => number;
    protected _getStFn: (commandId: number, handle: number, cb: any) => number;
    protected _serializeFn: (commandId: number, handle: number, cb: any) => number;
    protected _deserializeFn: (commandId: number, data: string, cb: any) => number;
    private _requestedAttributes;
    private _name;
    private _proofState;
    constructor(sourceId: string, { attrs, name }: IProofConstructorData);
    /**
     *
     * Updates the state of the proof from the given message.
     *
     * Example:
     * ```
     * await object.updateStateWithMessage(message)
     * ```
     * @returns {Promise<void>}
     */
    updateStateWithMessage(message: string): Promise<void>;
    /**
     * Sends a proof request to pairwise connection.
     *
     * Example
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.requestProof(connection)
     * ```
     */
    requestProof(connection: Connection): Promise<void>;
    /**
     * Generates the proof request message for sending.
     *
     * Example:
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.getProofRequestMessage()
     * ```
     */
    getProofRequestMessage(): Promise<string>;
    /**
     * Returns the requested proof if available
     *
     * Example
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.requestProof(connection)
     * proofData = await proof.getProof(connection)
     * assert.equal(proofData.proofState, ProofState.Verified)
     * ```
     */
    getProof(connection: Connection): Promise<IProofResponses>;
    /**
     * Get the state of the proof
     *
     * Example
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.requestProof(connection)
     * assert.equal(await proof.getState(), StateType.OfferSent)
     * ```
     */
    get proofState(): ProofState | null;
    /**
     * Get the attributes of the proof
     *
     * Example
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.requestProof(connection)
     * assert.equal(await proof.getState(), StateType.OfferSent)
     * proofData = await proof.getProof(connection)
     * await proof.updateState()
     * assert.equal(await proof.requestedAttributes(), data.attrs)
     * ```
     */
    get requestedAttributes(): IProofAttr[];
    /**
     * Get the name of the proof
     *
     * Example
     * ```
     * data = {
     *   attrs: [
     *     { name: 'attr1' },
     *     { name: 'attr2' }],
     *   name: 'Proof',
     *   sourceId: 'testProofSourceId'
     * }
     * proof = await Proof.create(data)
     * await proof.requestProof(connection)
     * assert.equal(await proof.getState(), StateType.OfferSent)
     * proofData = await proof.getProof(connection)
     * await proof.updateState()
     * assert.equal(await proof.name(), data.name)
     * ```
     */
    get name(): string;
}
