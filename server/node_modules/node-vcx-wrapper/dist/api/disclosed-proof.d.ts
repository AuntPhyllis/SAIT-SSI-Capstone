import { ISerializedData } from './common';
import { Connection } from './connection';
import { VCXBaseWithState } from './vcx-base-with-state';
export interface IDisclosedProofData {
    source_id: string;
}
export declare type IDisclosedProofRequest = object;
export interface IDisclosedProofCreateData {
    connection: Connection;
    sourceId: string;
    request: string;
}
export interface IDisclosedProofCreateWithMsgIdData {
    connection: Connection;
    msgId: string;
    sourceId: string;
}
export interface IRetrievedCreds {
    attrs: {
        [index: string]: ICredData[];
    };
    predicates: any;
}
export interface ICredData {
    cred_info: {
        [index: string]: any;
    };
    interval: any;
}
export interface IGenerateProofData {
    selectedCreds: {
        [index: string]: ICredData;
    };
    selfAttestedAttrs: {
        [index: string]: string;
    };
}
export declare class DisclosedProof extends VCXBaseWithState<IDisclosedProofData> {
    /**
     * Create a proof for fulfilling a corresponding proof request
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProofRequest = {
     * '@topic': {
     *   mid: 9,
     *   tid: 1
     * },
     * '@type': {
     *   name: 'PROOF_REQUEST',
     *   version: '1.0'
     * },
     * 'msg_ref_id': 'abcd',
     * 'proof_request_data': {
     *   name: 'Account Certificate',
     *   nonce: '838186471541979035208225',
     *   requested_attributes: {
     *      business_2: {
     *       name: 'business'
     *     },
     *     email_1: {
     *       name: 'email'
     *     },
     *     name_0: {
     *       name: 'name'
     *     }
     *   },
     *   requested_predicates: {},
     *   version: '0.1'
     * }
     * sourceId = 'testDisclosedProofSourceId'
     * disclosedProof = await DisclosedProof.create({ connection, request: disclosedProofRequest, sourceId: sourceId })
     * ```
     */
    static create({ sourceId, request }: IDisclosedProofCreateData): Promise<DisclosedProof>;
    /**
     * Create a proof for fulfilling a corresponding proof request with MsgId from Agency Service
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * ```
     */
    static createWithMsgId({ connection, sourceId, msgId }: IDisclosedProofCreateWithMsgIdData): Promise<DisclosedProof>;
    /**
     * Serializes the object
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * data = await disclosedProof.serialize()
     * ```
     */
    static deserialize(data: ISerializedData<IDisclosedProofData>): Promise<DisclosedProof>;
    /**
     * Serializes the object
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * requests = disclosedProof.getRequests(connection)
     * ```
     */
    static getRequests(connection: Connection): Promise<IDisclosedProofRequest[]>;
    protected _releaseFn: (handle: number) => number;
    protected _updateStFn: (commandId: number, handle: number, cb: any) => number;
    protected _updateStWithMessageFn: (commandId: number, handle: number, message: string, cb: any) => number;
    protected _getStFn: (commandId: number, handle: number, cb: any) => number;
    protected _serializeFn: (commandId: number, handle: number, cb: any) => number;
    protected _deserializeFn: (commandId: number, data: string, cb: any) => number;
    private _proofReq;
    /**
     * Gets the credentials from a disclosed proof
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * creds = await disclosedProof.getCredentials()
     * ```
     */
    getCredentials(): Promise<IRetrievedCreds>;
    /**
     * Sends the proof to the Connection
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * { attrs } = await disclosedProof.getCredentials()
     * valSelfAttested = 'testSelfAttestedVal'
     * await disclosedProof.generateProof({
     *    {},
     *    mapValues(attrs, () => valSelfAttested)
     *  })
     * await disclosedProof.sendProof(connection)
     * ```
     */
    sendProof(connection: Connection): Promise<void>;
    /**
     * Sends the proof reject to the Connection
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * await disclosedProof.rejectProof(connection)
     * ```
     */
    rejectProof(connection: Connection): Promise<void>;
    /**
     * Generates the proof message for sending.
     *
     * Example:
     * ```
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * { attrs } = await disclosedProof.getCredentials()
     * valSelfAttested = 'testSelfAttestedVal'
     * await disclosedProof.generateProof({
     *    {},
     *    mapValues(attrs, () => valSelfAttested)
     *  })
     * await disclosedProof.getProofMessage(connection)
     * ```
     */
    getProofMessage(): Promise<string>;
    /**
     * Generates the proof reject message for sending.
     *
     * Example:
     * ```
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * await disclosedProof.getRejectMessage(connection)
     * ```
     */
    getRejectMessage(): Promise<string>;
    /**
     * Generates the proof
     *
     * Example:
     * ```
     * connection = await Connection.create({id: 'foobar'})
     * inviteDetails = await connection.connect()
     * disclosedProof = await DisclosedProof.createWithMsgId(connection, 'testDisclousedProofMsgId', 'sourceId')
     * { attrs } = await disclosedProof.getCredentials()
     * valSelfAttested = 'testSelfAttestedVal'
     * await disclosedProof.generateProof({
     *    {},
     *    mapValues(attrs, () => valSelfAttested)
     *  })
     * ```
     */
    generateProof({ selectedCreds, selfAttestedAttrs }: IGenerateProofData): Promise<void>;
    get proofRequest(): string;
}
